package server;


import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.*;
import java.util.*;

import view.*;
import world.CreateWorld;

/**
 * MudServer is the main server for our MUD. It will control all of the clients
 * that are current in game. It will have access to all of the clients through
 * an array list. It will have a main method that will start the server. The
 * server will then be constantly looking for clients that are attempting to
 * connect and accept there request. It can
 * 
 * @author Matt Turner, Ross Bottorf, Zach Boe, Jonathan Perrie
 * 
 */

public class MudServer {

	private static final int LISTENER_PORT = 4000;
	private ArrayList<server.Client> clients = new ArrayList<server.Client>();
	private ServerSocket serverSocket;
	private int port;

	/**
	 * MudServer constructor will set the port that is read in, which will
	 * always be 4000 and initialize the ArrayList of clients.
	 * 
	 * @param port
	 *            Port of the server
	 */
	public MudServer(int port) {
		this.port = port;
		//clients = new ArrayList<server.Client>();
	}

	/**
	 * main is called once to initialize a new MUD server and then call start on
	 * the server. Start will continuously look for new clients who are
	 * attempting to connect.
	 * 
	 * @param args
	 *            Default command line array
	 * @throws ClassNotFoundException 
	 * @throws IOException 
	 * @throws FileNotFoundException 
	 */
	public static void main(String[] args) throws FileNotFoundException, IOException, ClassNotFoundException {
		MudServer mudServer = new MudServer(LISTENER_PORT);
		CreateWorld.createWorld();
		mudServer.start(); // main server loop
	}

	/**
	 * Start is the main method for the server. It will be called from main()
	 * and once it starts it will create a new ServerSocket and a new socket.
	 * The new socket will be used once the server gets a request to connect.
	 * Once it gets a request it will call accept on the connect, make a new
	 * client and call start on that client. It will do this until the server
	 * disconnects.
	 */
	public void start() {
		List<Client> removalList = new ArrayList<Client>();

		try {
			serverSocket = new ServerSocket(port);
			Socket connection;
			Client c;

			while (true) {
				connection = serverSocket.accept();

				c = new server.Client(connection,this);
				System.out.println("Got connection: " + connection);
				clients.add(c);
				c.start();

				// Check for disconnected clients
				removalList.clear();

				for (server.Client c2 : clients) {
					if (c2.getState() == ClientState.DONE) {
						removalList.add(c2);
					}
				}
				clients.removeAll(removalList);
			}
		} catch (IOException ioe) {
			ioe.printStackTrace();
			if (serverSocket != null) {
				try {
					serverSocket.close();
				} catch (IOException ioe2) {
					ioe2.printStackTrace();
				}
			}
		}
	}

	/**
	 * messageAllCleints will be used when a chat command is called that needs
	 * to be sent to all clients. The ArrayList will be used here to get access
	 * to all connected clients.
	 * 
	 * @param msg
	 *            String to be sent to players
	 */
	public void messageAllClients(String msg) {
		Communication communication = new Communication(msg);
		for (Client c : this.clients) {
			if (c.getState() != ClientState.ERROR) {
				try {
					c.getOutput().writeObject(communication);
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}

	public List<Client> getClients() {
		return this.clients;
	}
}
