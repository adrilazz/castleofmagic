package world;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.*;

/**
 * World class will hold all of the objects that are contained in the world. It
 * will have an ArrayList of DatabaseObjects, each object will represent a
 * player or piece of equipment in the world. Each will have a unique id so that
 * there is easy storage in the DatabaseObject class.
 * 
 * @author Matt Turner, Ross Bottorf, Zach Boe, Jonathan Perrine
 * 
 */
public class World implements Runnable, Serializable {

	private transient static World instance = new World();
	private transient Thread saveThread;
	private transient boolean threadsLocked;
	private transient Object lockObject = new Object();

	private List<DatabaseObject> databaseArray = new ArrayList<DatabaseObject>();
	private int objectNumbers;
	private Map<String, Player> players;

	// This private constructor will initialize necessary variables.
	private World() {

		boolean loadedFromFile = false;

		try {
			// load database objects
			FileInputStream dFis = new FileInputStream(
					"H:\\MudWorld\\databaseArray.txt");
			ObjectInputStream dIn = new ObjectInputStream(dFis);
			this.databaseArray = (ArrayList<DatabaseObject>) dIn.readObject();
			this.objectNumbers = this.databaseArray.size();

			// load player list.
			FileInputStream pfis = new FileInputStream(
					"H:\\MudWorld\\players.txt");
			ObjectInputStream pIn = new ObjectInputStream(pfis);
			this.players = (HashMap<String, Player>) pIn.readObject();

			loadedFromFile = true;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}

		if (!loadedFromFile) {
			this.databaseArray = new ArrayList<DatabaseObject>();
			this.objectNumbers = 0;
			this.players = new HashMap<String, Player>();
		}

		this.saveThread = new Thread(this);
		this.saveThread.start();
	}

	/**
	 * addToWorld will be called in the WorldFactory. All objects will be hard
	 * coded in the WorldFactory and added using this addToWorld method. It will
	 * check the current list of objects and if it is already on the list will
	 * return false, if it is not in the list it will be added and return true.
	 * 
	 * @param toAdd
	 *            DatabaseObject to add
	 * @return True if object was added, false otherwise
	 */
	public boolean addToWorld(DatabaseObject toAdd) {
		toAdd.setDatabaseRef(objectNumbers);
		boolean result = databaseArray.add(toAdd);
		objectNumbers++;
		return result;
	}

	/**
	 * removeFromWorld will take in a DatabaseObject and attempt to remove it
	 * from the world. This will look in the list of DatabaseObjects and if it
	 * in the list, it will remove it and return true. And if it is not in the
	 * list will return false. This will most likely occur when a player
	 * connects or disconnects.
	 * 
	 * @param toRemove
	 *            DatabaseObject to be removed
	 * @return True if object was removed, false otherwise
	 */
	public boolean removeFromWorld(DatabaseObject toRemove) {
		return databaseArray.add(toRemove);
	}

	/**
	 * getDatabaseObject will take in an int that will represent the id of the
	 * DatabaseObject that is being looked for. This method will take the int
	 * and iterate through the list and check all the id's of the objects. If
	 * there is an object with the id, it will be returned if the object is not
	 * found it will return null.
	 * 
	 * @param objectID
	 *            int ID of the object
	 * @return DatabaseObject with the id, or null if not found
	 */
	public DatabaseObject getDatabaseObject(int objectID) {
		for (DatabaseObject dbobj : databaseArray) {
			if (dbobj.getDatabaseRef() == objectID)
				return dbobj;
		}
		return null;

	}

	// /*
	// * This private class stores the instance of the World.
	// */
	// private static class WorldHolder {
	// private static final World INSTANCE = new World();
	// }

	/**
	 * This method returns the Singleton instance of the world.
	 * 
	 * @return - The Instance of the World
	 */
	public static World getInstance() {
		return instance;
	}

	/**
	 * This getPlayers() method returns a list of players.
	 * 
	 * @return - A List that represents the players registered for the game.
	 */
	public List<Player> getPlayers() {

		List<Player> result = new ArrayList<Player>();

		for (Player player : this.players.values()) {
			result.add(player);
		}

		return result;
	}

	/**
	 * The playerExists(String) method returns true if a name already exists in
	 * the player list.
	 * 
	 * @param name
	 *            - The name to check and see if it exists.
	 * @return - A boolean that represents whether or not the player exists.
	 */
	public boolean playerExists(String name) {
		return this.players.containsKey(name.toLowerCase());
	}

	/**
	 * The createPlayer(String,String) method creates a player and adds it to
	 * the world.
	 * 
	 * @param name
	 *            - A String that represents the name of the player to add to
	 *            the world.
	 * @param password
	 *            - A String that represents the player's password.
	 * @return - A boolean that represents whether or not the player addition
	 *         was successful.
	 */
	public boolean createPlayer(String name, String password) {

		if (this.playerExists(name))
			return false;

		Player temp = new Player(name);
		temp.setPassword(password);
		temp.setLocation((Room) World.getInstance().getDatabaseObject(1));
		if (this.players.put(name.toLowerCase(), temp) == null) {
			return true;
		}

		return false;
	}

	/**
	 * The confirmPlayer(String,String) method confirms whether or not a player
	 * has registered (exists) in the world.
	 * 
	 * @param name
	 *            - A String that represents the name of the player.
	 * @param password
	 *            - A String that represents the player's password.
	 * @return - A boolean that represents whether or not the player exists in
	 *         the world.
	 */
	public boolean confirmPlayer(String name, String password) {
		if (!this.playerExists(name))
			return false;

		return this.getPlayer(name).validatePassword(password);
	}

	/**
	 * The getPlayer method retrieves a player from the world's list of players
	 * by their name. This method does not use case sensitivity, meaning that
	 * any combination of upper and lower case letters will be lower cased and
	 * compared to the key in the Map of players.).
	 * 
	 * @param name
	 *            - A String that represents the player's name to retrieve from
	 *            the world.
	 * @return - A Player object with the same name as the passed parameter.
	 */
	public Player getPlayer(String name) {
		return this.players.get(name.toLowerCase());
	}

	/**
	 * The loadWorld() method loads the world from a saved file.
	 */
	public void loadWorld() {
		FileInputStream fis;
		try {
			fis = new FileInputStream("H:\\testWorld.txt");
			ObjectInputStream in = new ObjectInputStream(fis);
			world.Room Zero = (Room) in.readObject();
			databaseArray.add(Zero);
			System.out.println(Zero.listRooms());
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}

	/**
	 * The printAll() method is used to help test game saves and loads.
	 */
	public void printAll() {
		for (DatabaseObject DB : databaseArray) {
			System.out.println(DB.getName() + "|" + DB.getDatabaseRef() + "|"
					+ DB.getDescription());
		}
	}

	/**
	 * lockThreads is used when ever the certain threads need stopped.It will
	 * set the threadsLocked variable to true.
	 */
	public void lockThreads() {
		this.threadsLocked = true;
	}

	/**
	 * threadsLocked() will simply return true if the threads have been locked.
	 * This will be contained in the boolean threadsLocked variable.
	 * 
	 * @return True if threads are locked and false otherwise.
	 */
	public boolean threadsLocked() {
		return threadsLocked;
	}

	/**
	 * unlockThreads() will be called upon to take all locked threads and unlock
	 * them. This will also make use of the lockObject instance variable.
	 */
	public void unlockThreads() {
		synchronized (lockObject) {
			this.threadsLocked = false;
			this.lockObject.notifyAll();
		}
	}

	/**
	 * Returns the lock object for the World instance.
	 * 
	 * @return - An object used as a lock for threads.
	 */
	public Object getLockObject() {
		return this.lockObject;
	}

	/**
	 * The run method saves the world every 5 minutes.
	 */
	@Override
	public void run() {
		boolean justStarted = true;
		try {
			for (;;) {

				synchronized (this.getLockObject()) {
					while (this.threadsLocked()) {
						try {
							this.getLockObject().wait();
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
				}

				if (!justStarted) {
					this.saveWorld();
				}
				if (justStarted) {
					justStarted = false;
				}
				Thread.sleep(60000);
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}

	/**
	 * The saveWorld() method saves the world instance.
	 * 
	 * @return - Always return true for system shutdown.
	 */
	public void saveWorld() {
		this.lockThreads();
		File databaseArray = new File("H:\\MudWorld\\databaseArray.txt");

		try {
			FileOutputStream fos;
			fos = new FileOutputStream(databaseArray);
			ObjectOutputStream out = new ObjectOutputStream(fos);
			out.writeObject(this.databaseArray);
			out.flush();
			out.close();
			fos.close();
			this.savePlayers();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		File players = new File("H:\\MudWorld\\players.txt");
		try {
			FileOutputStream pfos;
			pfos = new FileOutputStream(players);
			ObjectOutputStream pout = new ObjectOutputStream(pfos);
			pout.writeObject(this.players);
			pout.flush();
			pout.close();
			pfos.close();
			this.savePlayers();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		this.unlockThreads();
	}

	/**
	 * The save player method saves a singled player instance.
	 * 
	 * @param player
	 */
	public void savePlayer(Player player) {

		File playerFile = new File("H:\\MudWorld\\MudPlayers\\"
				+ player.getName().toLowerCase() + ".txt");

		FileOutputStream fos;
		try {
			fos = new FileOutputStream(playerFile);
			ObjectOutputStream out = new ObjectOutputStream(fos);
			out.writeObject(player);
			out.flush();
			out.close();
			fos.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * The savePlayers() method saves all players in the player list.
	 */
	public void savePlayers() {
		for (Player player : this.getPlayers()) {
			this.savePlayer(player);
		}
	}

	public List<DatabaseObject> getDatabaseObjects() {
		return this.databaseArray;
	}
}
